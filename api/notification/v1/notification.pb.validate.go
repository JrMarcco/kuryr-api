// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: notification/v1/notification.proto

package notificationv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	commonv1 "github.com/JrMarcco/kuryr-api/api/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = commonv1.Channel(0)
)

// Validate checks the field values on SendStrategy with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendStrategy with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendStrategyMultiError, or
// nil if none found.
func (m *SendStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *SendStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.StrategyType.(type) {
	case *SendStrategy_Immediate:
		if v == nil {
			err := SendStrategyValidationError{
				field:  "StrategyType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetImmediate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendStrategyValidationError{
						field:  "Immediate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendStrategyValidationError{
						field:  "Immediate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetImmediate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendStrategyValidationError{
					field:  "Immediate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SendStrategy_Delayed:
		if v == nil {
			err := SendStrategyValidationError{
				field:  "StrategyType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDelayed()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendStrategyValidationError{
						field:  "Delayed",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendStrategyValidationError{
						field:  "Delayed",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDelayed()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendStrategyValidationError{
					field:  "Delayed",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SendStrategy_Scheduled:
		if v == nil {
			err := SendStrategyValidationError{
				field:  "StrategyType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetScheduled()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendStrategyValidationError{
						field:  "Scheduled",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendStrategyValidationError{
						field:  "Scheduled",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetScheduled()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendStrategyValidationError{
					field:  "Scheduled",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SendStrategy_TimeWindow:
		if v == nil {
			err := SendStrategyValidationError{
				field:  "StrategyType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTimeWindow()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendStrategyValidationError{
						field:  "TimeWindow",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendStrategyValidationError{
						field:  "TimeWindow",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTimeWindow()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendStrategyValidationError{
					field:  "TimeWindow",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SendStrategy_Deadline:
		if v == nil {
			err := SendStrategyValidationError{
				field:  "StrategyType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDeadline()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendStrategyValidationError{
						field:  "Deadline",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendStrategyValidationError{
						field:  "Deadline",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeadline()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendStrategyValidationError{
					field:  "Deadline",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return SendStrategyMultiError(errors)
	}

	return nil
}

// SendStrategyMultiError is an error wrapping multiple validation errors
// returned by SendStrategy.ValidateAll() if the designated constraints aren't met.
type SendStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendStrategyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendStrategyMultiError) AllErrors() []error { return m }

// SendStrategyValidationError is the validation error returned by
// SendStrategy.Validate if the designated constraints aren't met.
type SendStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendStrategyValidationError) ErrorName() string { return "SendStrategyValidationError" }

// Error satisfies the builtin error interface
func (e SendStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendStrategyValidationError{}

// Validate checks the field values on ImmediatelyStrategy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImmediatelyStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImmediatelyStrategy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImmediatelyStrategyMultiError, or nil if none found.
func (m *ImmediatelyStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *ImmediatelyStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ImmediatelyStrategyMultiError(errors)
	}

	return nil
}

// ImmediatelyStrategyMultiError is an error wrapping multiple validation
// errors returned by ImmediatelyStrategy.ValidateAll() if the designated
// constraints aren't met.
type ImmediatelyStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImmediatelyStrategyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImmediatelyStrategyMultiError) AllErrors() []error { return m }

// ImmediatelyStrategyValidationError is the validation error returned by
// ImmediatelyStrategy.Validate if the designated constraints aren't met.
type ImmediatelyStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImmediatelyStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImmediatelyStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImmediatelyStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImmediatelyStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImmediatelyStrategyValidationError) ErrorName() string {
	return "ImmediatelyStrategyValidationError"
}

// Error satisfies the builtin error interface
func (e ImmediatelyStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImmediatelyStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImmediatelyStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImmediatelyStrategyValidationError{}

// Validate checks the field values on DelayedStrategy with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DelayedStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelayedStrategy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelayedStrategyMultiError, or nil if none found.
func (m *DelayedStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *DelayedStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DelaySeconds

	if len(errors) > 0 {
		return DelayedStrategyMultiError(errors)
	}

	return nil
}

// DelayedStrategyMultiError is an error wrapping multiple validation errors
// returned by DelayedStrategy.ValidateAll() if the designated constraints
// aren't met.
type DelayedStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelayedStrategyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelayedStrategyMultiError) AllErrors() []error { return m }

// DelayedStrategyValidationError is the validation error returned by
// DelayedStrategy.Validate if the designated constraints aren't met.
type DelayedStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelayedStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelayedStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelayedStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelayedStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelayedStrategyValidationError) ErrorName() string { return "DelayedStrategyValidationError" }

// Error satisfies the builtin error interface
func (e DelayedStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelayedStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelayedStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelayedStrategyValidationError{}

// Validate checks the field values on ScheduledStrategy with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ScheduledStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScheduledStrategy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScheduledStrategyMultiError, or nil if none found.
func (m *ScheduledStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *ScheduledStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduledStrategyValidationError{
					field:  "SendTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduledStrategyValidationError{
					field:  "SendTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduledStrategyValidationError{
				field:  "SendTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ScheduledStrategyMultiError(errors)
	}

	return nil
}

// ScheduledStrategyMultiError is an error wrapping multiple validation errors
// returned by ScheduledStrategy.ValidateAll() if the designated constraints
// aren't met.
type ScheduledStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScheduledStrategyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScheduledStrategyMultiError) AllErrors() []error { return m }

// ScheduledStrategyValidationError is the validation error returned by
// ScheduledStrategy.Validate if the designated constraints aren't met.
type ScheduledStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduledStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduledStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduledStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduledStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduledStrategyValidationError) ErrorName() string {
	return "ScheduledStrategyValidationError"
}

// Error satisfies the builtin error interface
func (e ScheduledStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduledStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduledStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduledStrategyValidationError{}

// Validate checks the field values on TimeWindowStrategy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TimeWindowStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeWindowStrategy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimeWindowStrategyMultiError, or nil if none found.
func (m *TimeWindowStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeWindowStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartTimeMillis

	// no validation rules for EndTimeMillis

	if len(errors) > 0 {
		return TimeWindowStrategyMultiError(errors)
	}

	return nil
}

// TimeWindowStrategyMultiError is an error wrapping multiple validation errors
// returned by TimeWindowStrategy.ValidateAll() if the designated constraints
// aren't met.
type TimeWindowStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeWindowStrategyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeWindowStrategyMultiError) AllErrors() []error { return m }

// TimeWindowStrategyValidationError is the validation error returned by
// TimeWindowStrategy.Validate if the designated constraints aren't met.
type TimeWindowStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeWindowStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeWindowStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeWindowStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeWindowStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeWindowStrategyValidationError) ErrorName() string {
	return "TimeWindowStrategyValidationError"
}

// Error satisfies the builtin error interface
func (e TimeWindowStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeWindowStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeWindowStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeWindowStrategyValidationError{}

// Validate checks the field values on DeadlineStrategy with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeadlineStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeadlineStrategy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeadlineStrategyMultiError, or nil if none found.
func (m *DeadlineStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *DeadlineStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDeadline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeadlineStrategyValidationError{
					field:  "Deadline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeadlineStrategyValidationError{
					field:  "Deadline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeadline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeadlineStrategyValidationError{
				field:  "Deadline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeadlineStrategyMultiError(errors)
	}

	return nil
}

// DeadlineStrategyMultiError is an error wrapping multiple validation errors
// returned by DeadlineStrategy.ValidateAll() if the designated constraints
// aren't met.
type DeadlineStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeadlineStrategyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeadlineStrategyMultiError) AllErrors() []error { return m }

// DeadlineStrategyValidationError is the validation error returned by
// DeadlineStrategy.Validate if the designated constraints aren't met.
type DeadlineStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeadlineStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeadlineStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeadlineStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeadlineStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeadlineStrategyValidationError) ErrorName() string { return "DeadlineStrategyValidationError" }

// Error satisfies the builtin error interface
func (e DeadlineStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeadlineStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeadlineStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeadlineStrategyValidationError{}

// Validate checks the field values on Notification with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Notification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Notification with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotificationMultiError, or
// nil if none found.
func (m *Notification) ValidateAll() error {
	return m.validate(true)
}

func (m *Notification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizKey

	// no validation rules for Channel

	// no validation rules for TplId

	// no validation rules for TplParams

	if all {
		switch v := interface{}(m.GetStrategy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "Strategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "Strategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStrategy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationValidationError{
				field:  "Strategy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NotificationMultiError(errors)
	}

	return nil
}

// NotificationMultiError is an error wrapping multiple validation errors
// returned by Notification.ValidateAll() if the designated constraints aren't met.
type NotificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationMultiError) AllErrors() []error { return m }

// NotificationValidationError is the validation error returned by
// Notification.Validate if the designated constraints aren't met.
type NotificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationValidationError) ErrorName() string { return "NotificationValidationError" }

// Error satisfies the builtin error interface
func (e NotificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationValidationError{}

// Validate checks the field values on SendResult with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendResult with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendResultMultiError, or
// nil if none found.
func (m *SendResult) ValidateAll() error {
	return m.validate(true)
}

func (m *SendResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NotificationId

	// no validation rules for Status

	// no validation rules for ErrCode

	// no validation rules for ErrMsg

	if len(errors) > 0 {
		return SendResultMultiError(errors)
	}

	return nil
}

// SendResultMultiError is an error wrapping multiple validation errors
// returned by SendResult.ValidateAll() if the designated constraints aren't met.
type SendResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendResultMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendResultMultiError) AllErrors() []error { return m }

// SendResultValidationError is the validation error returned by
// SendResult.Validate if the designated constraints aren't met.
type SendResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendResultValidationError) ErrorName() string { return "SendResultValidationError" }

// Error satisfies the builtin error interface
func (e SendResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendResultValidationError{}

// Validate checks the field values on SendRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendRequestMultiError, or
// nil if none found.
func (m *SendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNotification()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendRequestValidationError{
					field:  "Notification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendRequestValidationError{
					field:  "Notification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotification()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendRequestValidationError{
				field:  "Notification",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendRequestMultiError(errors)
	}

	return nil
}

// SendRequestMultiError is an error wrapping multiple validation errors
// returned by SendRequest.ValidateAll() if the designated constraints aren't met.
type SendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendRequestMultiError) AllErrors() []error { return m }

// SendRequestValidationError is the validation error returned by
// SendRequest.Validate if the designated constraints aren't met.
type SendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendRequestValidationError) ErrorName() string { return "SendRequestValidationError" }

// Error satisfies the builtin error interface
func (e SendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendRequestValidationError{}

// Validate checks the field values on SendResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendResponseMultiError, or
// nil if none found.
func (m *SendResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendResponseMultiError(errors)
	}

	return nil
}

// SendResponseMultiError is an error wrapping multiple validation errors
// returned by SendResponse.ValidateAll() if the designated constraints aren't met.
type SendResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendResponseMultiError) AllErrors() []error { return m }

// SendResponseValidationError is the validation error returned by
// SendResponse.Validate if the designated constraints aren't met.
type SendResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendResponseValidationError) ErrorName() string { return "SendResponseValidationError" }

// Error satisfies the builtin error interface
func (e SendResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendResponseValidationError{}

// Validate checks the field values on AsyncSendRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AsyncSendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AsyncSendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AsyncSendRequestMultiError, or nil if none found.
func (m *AsyncSendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AsyncSendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNotification()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AsyncSendRequestValidationError{
					field:  "Notification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AsyncSendRequestValidationError{
					field:  "Notification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotification()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AsyncSendRequestValidationError{
				field:  "Notification",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AsyncSendRequestMultiError(errors)
	}

	return nil
}

// AsyncSendRequestMultiError is an error wrapping multiple validation errors
// returned by AsyncSendRequest.ValidateAll() if the designated constraints
// aren't met.
type AsyncSendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AsyncSendRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AsyncSendRequestMultiError) AllErrors() []error { return m }

// AsyncSendRequestValidationError is the validation error returned by
// AsyncSendRequest.Validate if the designated constraints aren't met.
type AsyncSendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AsyncSendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AsyncSendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AsyncSendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AsyncSendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AsyncSendRequestValidationError) ErrorName() string { return "AsyncSendRequestValidationError" }

// Error satisfies the builtin error interface
func (e AsyncSendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAsyncSendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AsyncSendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AsyncSendRequestValidationError{}

// Validate checks the field values on AsyncSendResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AsyncSendResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AsyncSendResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AsyncSendResponseMultiError, or nil if none found.
func (m *AsyncSendResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AsyncSendResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AsyncSendResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AsyncSendResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AsyncSendResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AsyncSendResponseMultiError(errors)
	}

	return nil
}

// AsyncSendResponseMultiError is an error wrapping multiple validation errors
// returned by AsyncSendResponse.ValidateAll() if the designated constraints
// aren't met.
type AsyncSendResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AsyncSendResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AsyncSendResponseMultiError) AllErrors() []error { return m }

// AsyncSendResponseValidationError is the validation error returned by
// AsyncSendResponse.Validate if the designated constraints aren't met.
type AsyncSendResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AsyncSendResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AsyncSendResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AsyncSendResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AsyncSendResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AsyncSendResponseValidationError) ErrorName() string {
	return "AsyncSendResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AsyncSendResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAsyncSendResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AsyncSendResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AsyncSendResponseValidationError{}

// Validate checks the field values on BatchSendRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BatchSendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchSendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchSendRequestMultiError, or nil if none found.
func (m *BatchSendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchSendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNotifications() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchSendRequestValidationError{
						field:  fmt.Sprintf("Notifications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchSendRequestValidationError{
						field:  fmt.Sprintf("Notifications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchSendRequestValidationError{
					field:  fmt.Sprintf("Notifications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchSendRequestMultiError(errors)
	}

	return nil
}

// BatchSendRequestMultiError is an error wrapping multiple validation errors
// returned by BatchSendRequest.ValidateAll() if the designated constraints
// aren't met.
type BatchSendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchSendRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchSendRequestMultiError) AllErrors() []error { return m }

// BatchSendRequestValidationError is the validation error returned by
// BatchSendRequest.Validate if the designated constraints aren't met.
type BatchSendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchSendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchSendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchSendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchSendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchSendRequestValidationError) ErrorName() string { return "BatchSendRequestValidationError" }

// Error satisfies the builtin error interface
func (e BatchSendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchSendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchSendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchSendRequestValidationError{}

// Validate checks the field values on BatchSendResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BatchSendResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchSendResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchSendResponseMultiError, or nil if none found.
func (m *BatchSendResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchSendResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchSendResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchSendResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchSendResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCnt

	// no validation rules for SuccessCnt

	if len(errors) > 0 {
		return BatchSendResponseMultiError(errors)
	}

	return nil
}

// BatchSendResponseMultiError is an error wrapping multiple validation errors
// returned by BatchSendResponse.ValidateAll() if the designated constraints
// aren't met.
type BatchSendResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchSendResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchSendResponseMultiError) AllErrors() []error { return m }

// BatchSendResponseValidationError is the validation error returned by
// BatchSendResponse.Validate if the designated constraints aren't met.
type BatchSendResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchSendResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchSendResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchSendResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchSendResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchSendResponseValidationError) ErrorName() string {
	return "BatchSendResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchSendResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchSendResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchSendResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchSendResponseValidationError{}

// Validate checks the field values on AsyncBatchSendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AsyncBatchSendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AsyncBatchSendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AsyncBatchSendRequestMultiError, or nil if none found.
func (m *AsyncBatchSendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AsyncBatchSendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNotifications() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AsyncBatchSendRequestValidationError{
						field:  fmt.Sprintf("Notifications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AsyncBatchSendRequestValidationError{
						field:  fmt.Sprintf("Notifications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AsyncBatchSendRequestValidationError{
					field:  fmt.Sprintf("Notifications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AsyncBatchSendRequestMultiError(errors)
	}

	return nil
}

// AsyncBatchSendRequestMultiError is an error wrapping multiple validation
// errors returned by AsyncBatchSendRequest.ValidateAll() if the designated
// constraints aren't met.
type AsyncBatchSendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AsyncBatchSendRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AsyncBatchSendRequestMultiError) AllErrors() []error { return m }

// AsyncBatchSendRequestValidationError is the validation error returned by
// AsyncBatchSendRequest.Validate if the designated constraints aren't met.
type AsyncBatchSendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AsyncBatchSendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AsyncBatchSendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AsyncBatchSendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AsyncBatchSendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AsyncBatchSendRequestValidationError) ErrorName() string {
	return "AsyncBatchSendRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AsyncBatchSendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAsyncBatchSendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AsyncBatchSendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AsyncBatchSendRequestValidationError{}

// Validate checks the field values on AsyncBatchSendResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AsyncBatchSendResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AsyncBatchSendResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AsyncBatchSendResponseMultiError, or nil if none found.
func (m *AsyncBatchSendResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AsyncBatchSendResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AsyncBatchSendResponseMultiError(errors)
	}

	return nil
}

// AsyncBatchSendResponseMultiError is an error wrapping multiple validation
// errors returned by AsyncBatchSendResponse.ValidateAll() if the designated
// constraints aren't met.
type AsyncBatchSendResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AsyncBatchSendResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AsyncBatchSendResponseMultiError) AllErrors() []error { return m }

// AsyncBatchSendResponseValidationError is the validation error returned by
// AsyncBatchSendResponse.Validate if the designated constraints aren't met.
type AsyncBatchSendResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AsyncBatchSendResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AsyncBatchSendResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AsyncBatchSendResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AsyncBatchSendResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AsyncBatchSendResponseValidationError) ErrorName() string {
	return "AsyncBatchSendResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AsyncBatchSendResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAsyncBatchSendResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AsyncBatchSendResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AsyncBatchSendResponseValidationError{}
