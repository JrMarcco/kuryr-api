// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: config/v1/config.proto

package configv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BizConfigService_Save_FullMethodName        = "/config.v1.BizConfigService/Save"
	BizConfigService_Update_FullMethodName      = "/config.v1.BizConfigService/Update"
	BizConfigService_FindByBizId_FullMethodName = "/config.v1.BizConfigService/FindByBizId"
)

// BizConfigServiceClient is the client API for BizConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BizConfigServiceClient interface {
	Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	FindByBizId(ctx context.Context, in *FindByBizIdRequest, opts ...grpc.CallOption) (*FindByBizIdResponse, error)
}

type bizConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBizConfigServiceClient(cc grpc.ClientConnInterface) BizConfigServiceClient {
	return &bizConfigServiceClient{cc}
}

func (c *bizConfigServiceClient) Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveResponse)
	err := c.cc.Invoke(ctx, BizConfigService_Save_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizConfigServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, BizConfigService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizConfigServiceClient) FindByBizId(ctx context.Context, in *FindByBizIdRequest, opts ...grpc.CallOption) (*FindByBizIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindByBizIdResponse)
	err := c.cc.Invoke(ctx, BizConfigService_FindByBizId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BizConfigServiceServer is the server API for BizConfigService service.
// All implementations should embed UnimplementedBizConfigServiceServer
// for forward compatibility.
type BizConfigServiceServer interface {
	Save(context.Context, *SaveRequest) (*SaveResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	FindByBizId(context.Context, *FindByBizIdRequest) (*FindByBizIdResponse, error)
}

// UnimplementedBizConfigServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBizConfigServiceServer struct{}

func (UnimplementedBizConfigServiceServer) Save(context.Context, *SaveRequest) (*SaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedBizConfigServiceServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBizConfigServiceServer) FindByBizId(context.Context, *FindByBizIdRequest) (*FindByBizIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByBizId not implemented")
}
func (UnimplementedBizConfigServiceServer) testEmbeddedByValue() {}

// UnsafeBizConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BizConfigServiceServer will
// result in compilation errors.
type UnsafeBizConfigServiceServer interface {
	mustEmbedUnimplementedBizConfigServiceServer()
}

func RegisterBizConfigServiceServer(s grpc.ServiceRegistrar, srv BizConfigServiceServer) {
	// If the following call pancis, it indicates UnimplementedBizConfigServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BizConfigService_ServiceDesc, srv)
}

func _BizConfigService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizConfigServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BizConfigService_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizConfigServiceServer).Save(ctx, req.(*SaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizConfigService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizConfigServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BizConfigService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizConfigServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizConfigService_FindByBizId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByBizIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizConfigServiceServer).FindByBizId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BizConfigService_FindByBizId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizConfigServiceServer).FindByBizId(ctx, req.(*FindByBizIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BizConfigService_ServiceDesc is the grpc.ServiceDesc for BizConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BizConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "config.v1.BizConfigService",
	HandlerType: (*BizConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _BizConfigService_Save_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BizConfigService_Update_Handler,
		},
		{
			MethodName: "FindByBizId",
			Handler:    _BizConfigService_FindByBizId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config/v1/config.proto",
}
