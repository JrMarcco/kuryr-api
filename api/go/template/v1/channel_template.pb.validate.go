// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: template/v1/channel_template.proto

package templatev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	commonv1 "github.com/JrMarcco/kuryr-api/api/go/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = commonv1.Channel(0)
)

// Validate checks the field values on ChannelTemplate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChannelTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelTemplate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChannelTemplateMultiError, or nil if none found.
func (m *ChannelTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for BizId

	// no validation rules for BizType

	// no validation rules for TplName

	// no validation rules for TplDesc

	// no validation rules for Channel

	// no validation rules for NotificationType

	// no validation rules for ActivatedVersionId

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ChannelTemplateMultiError(errors)
	}

	return nil
}

// ChannelTemplateMultiError is an error wrapping multiple validation errors
// returned by ChannelTemplate.ValidateAll() if the designated constraints
// aren't met.
type ChannelTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelTemplateMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelTemplateMultiError) AllErrors() []error { return m }

// ChannelTemplateValidationError is the validation error returned by
// ChannelTemplate.Validate if the designated constraints aren't met.
type ChannelTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelTemplateValidationError) ErrorName() string { return "ChannelTemplateValidationError" }

// Error satisfies the builtin error interface
func (e ChannelTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelTemplateValidationError{}

// Validate checks the field values on TemplateVersion with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TemplateVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TemplateVersion with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TemplateVersionMultiError, or nil if none found.
func (m *TemplateVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *TemplateVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TplId

	// no validation rules for VersionName

	// no validation rules for Signature

	// no validation rules for Content

	// no validation rules for ApplyRemark

	// no validation rules for AuditId

	// no validation rules for AuditorId

	// no validation rules for AuditTime

	// no validation rules for AuditStatus

	// no validation rules for RejectionReason

	// no validation rules for LastReviewAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return TemplateVersionMultiError(errors)
	}

	return nil
}

// TemplateVersionMultiError is an error wrapping multiple validation errors
// returned by TemplateVersion.ValidateAll() if the designated constraints
// aren't met.
type TemplateVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TemplateVersionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TemplateVersionMultiError) AllErrors() []error { return m }

// TemplateVersionValidationError is the validation error returned by
// TemplateVersion.Validate if the designated constraints aren't met.
type TemplateVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateVersionValidationError) ErrorName() string { return "TemplateVersionValidationError" }

// Error satisfies the builtin error interface
func (e TemplateVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateVersionValidationError{}

// Validate checks the field values on TemplateProvider with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TemplateProvider) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TemplateProvider with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TemplateProviderMultiError, or nil if none found.
func (m *TemplateProvider) ValidateAll() error {
	return m.validate(true)
}

func (m *TemplateProvider) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TplId

	// no validation rules for TplVersionId

	// no validation rules for ProviderId

	// no validation rules for ProviderName

	// no validation rules for ProviderTplId

	// no validation rules for ProviderChannel

	// no validation rules for AuditRequestId

	// no validation rules for AuditStatus

	// no validation rules for RejectionReason

	// no validation rules for LastReviewAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return TemplateProviderMultiError(errors)
	}

	return nil
}

// TemplateProviderMultiError is an error wrapping multiple validation errors
// returned by TemplateProvider.ValidateAll() if the designated constraints
// aren't met.
type TemplateProviderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TemplateProviderMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TemplateProviderMultiError) AllErrors() []error { return m }

// TemplateProviderValidationError is the validation error returned by
// TemplateProvider.Validate if the designated constraints aren't met.
type TemplateProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateProviderValidationError) ErrorName() string { return "TemplateProviderValidationError" }

// Error satisfies the builtin error interface
func (e TemplateProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateProvider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateProviderValidationError{}

// Validate checks the field values on SaveTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveTemplateRequestMultiError, or nil if none found.
func (m *SaveTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SaveTemplateRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SaveTemplateRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SaveTemplateRequestValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SaveTemplateRequestMultiError(errors)
	}

	return nil
}

// SaveTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by SaveTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type SaveTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveTemplateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveTemplateRequestMultiError) AllErrors() []error { return m }

// SaveTemplateRequestValidationError is the validation error returned by
// SaveTemplateRequest.Validate if the designated constraints aren't met.
type SaveTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveTemplateRequestValidationError) ErrorName() string {
	return "SaveTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SaveTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveTemplateRequestValidationError{}

// Validate checks the field values on SaveTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveTemplateResponseMultiError, or nil if none found.
func (m *SaveTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SaveTemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SaveTemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SaveTemplateResponseValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SaveTemplateResponseMultiError(errors)
	}

	return nil
}

// SaveTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by SaveTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type SaveTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveTemplateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveTemplateResponseMultiError) AllErrors() []error { return m }

// SaveTemplateResponseValidationError is the validation error returned by
// SaveTemplateResponse.Validate if the designated constraints aren't met.
type SaveTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveTemplateResponseValidationError) ErrorName() string {
	return "SaveTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SaveTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveTemplateResponseValidationError{}

// Validate checks the field values on DeleteTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTemplateRequestMultiError, or nil if none found.
func (m *DeleteTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteTemplateRequestMultiError(errors)
	}

	return nil
}

// DeleteTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTemplateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTemplateRequestMultiError) AllErrors() []error { return m }

// DeleteTemplateRequestValidationError is the validation error returned by
// DeleteTemplateRequest.Validate if the designated constraints aren't met.
type DeleteTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTemplateRequestValidationError) ErrorName() string {
	return "DeleteTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTemplateRequestValidationError{}

// Validate checks the field values on DeleteTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTemplateResponseMultiError, or nil if none found.
func (m *DeleteTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTemplateResponseMultiError(errors)
	}

	return nil
}

// DeleteTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTemplateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTemplateResponseMultiError) AllErrors() []error { return m }

// DeleteTemplateResponseValidationError is the validation error returned by
// DeleteTemplateResponse.Validate if the designated constraints aren't met.
type DeleteTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTemplateResponseValidationError) ErrorName() string {
	return "DeleteTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTemplateResponseValidationError{}

// Validate checks the field values on ListTemplateByBizIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTemplateByBizIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTemplateByBizIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTemplateByBizIdRequestMultiError, or nil if none found.
func (m *ListTemplateByBizIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTemplateByBizIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListTemplateByBizIdRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListTemplateByBizIdRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTemplateByBizIdRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Offset

	// no validation rules for Limit

	// no validation rules for BizId

	if len(errors) > 0 {
		return ListTemplateByBizIdRequestMultiError(errors)
	}

	return nil
}

// ListTemplateByBizIdRequestMultiError is an error wrapping multiple
// validation errors returned by ListTemplateByBizIdRequest.ValidateAll() if
// the designated constraints aren't met.
type ListTemplateByBizIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTemplateByBizIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTemplateByBizIdRequestMultiError) AllErrors() []error { return m }

// ListTemplateByBizIdRequestValidationError is the validation error returned
// by ListTemplateByBizIdRequest.Validate if the designated constraints aren't met.
type ListTemplateByBizIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplateByBizIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplateByBizIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplateByBizIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplateByBizIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplateByBizIdRequestValidationError) ErrorName() string {
	return "ListTemplateByBizIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplateByBizIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplateByBizIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplateByBizIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplateByBizIdRequestValidationError{}

// Validate checks the field values on ListTemplateByBizIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTemplateByBizIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTemplateByBizIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTemplateByBizIdResponseMultiError, or nil if none found.
func (m *ListTemplateByBizIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTemplateByBizIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTemplates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTemplateByBizIdResponseValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTemplateByBizIdResponseValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTemplateByBizIdResponseValidationError{
					field:  fmt.Sprintf("Templates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListTemplateByBizIdResponseMultiError(errors)
	}

	return nil
}

// ListTemplateByBizIdResponseMultiError is an error wrapping multiple
// validation errors returned by ListTemplateByBizIdResponse.ValidateAll() if
// the designated constraints aren't met.
type ListTemplateByBizIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTemplateByBizIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTemplateByBizIdResponseMultiError) AllErrors() []error { return m }

// ListTemplateByBizIdResponseValidationError is the validation error returned
// by ListTemplateByBizIdResponse.Validate if the designated constraints
// aren't met.
type ListTemplateByBizIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplateByBizIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplateByBizIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplateByBizIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplateByBizIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplateByBizIdResponseValidationError) ErrorName() string {
	return "ListTemplateByBizIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplateByBizIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplateByBizIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplateByBizIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplateByBizIdResponseValidationError{}

// Validate checks the field values on SaveTemplateVersionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveTemplateVersionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveTemplateVersionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveTemplateVersionRequestMultiError, or nil if none found.
func (m *SaveTemplateVersionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveTemplateVersionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SaveTemplateVersionRequestValidationError{
					field:  "Version",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SaveTemplateVersionRequestValidationError{
					field:  "Version",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SaveTemplateVersionRequestValidationError{
				field:  "Version",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SaveTemplateVersionRequestMultiError(errors)
	}

	return nil
}

// SaveTemplateVersionRequestMultiError is an error wrapping multiple
// validation errors returned by SaveTemplateVersionRequest.ValidateAll() if
// the designated constraints aren't met.
type SaveTemplateVersionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveTemplateVersionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveTemplateVersionRequestMultiError) AllErrors() []error { return m }

// SaveTemplateVersionRequestValidationError is the validation error returned
// by SaveTemplateVersionRequest.Validate if the designated constraints aren't met.
type SaveTemplateVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveTemplateVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveTemplateVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveTemplateVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveTemplateVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveTemplateVersionRequestValidationError) ErrorName() string {
	return "SaveTemplateVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SaveTemplateVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveTemplateVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveTemplateVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveTemplateVersionRequestValidationError{}

// Validate checks the field values on SaveTemplateVersionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveTemplateVersionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveTemplateVersionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveTemplateVersionResponseMultiError, or nil if none found.
func (m *SaveTemplateVersionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveTemplateVersionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SaveTemplateVersionResponseValidationError{
					field:  "Version",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SaveTemplateVersionResponseValidationError{
					field:  "Version",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SaveTemplateVersionResponseValidationError{
				field:  "Version",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SaveTemplateVersionResponseMultiError(errors)
	}

	return nil
}

// SaveTemplateVersionResponseMultiError is an error wrapping multiple
// validation errors returned by SaveTemplateVersionResponse.ValidateAll() if
// the designated constraints aren't met.
type SaveTemplateVersionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveTemplateVersionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveTemplateVersionResponseMultiError) AllErrors() []error { return m }

// SaveTemplateVersionResponseValidationError is the validation error returned
// by SaveTemplateVersionResponse.Validate if the designated constraints
// aren't met.
type SaveTemplateVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveTemplateVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveTemplateVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveTemplateVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveTemplateVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveTemplateVersionResponseValidationError) ErrorName() string {
	return "SaveTemplateVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SaveTemplateVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveTemplateVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveTemplateVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveTemplateVersionResponseValidationError{}

// Validate checks the field values on DeleteTemplateVersionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTemplateVersionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTemplateVersionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTemplateVersionRequestMultiError, or nil if none found.
func (m *DeleteTemplateVersionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTemplateVersionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteTemplateVersionRequestMultiError(errors)
	}

	return nil
}

// DeleteTemplateVersionRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteTemplateVersionRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteTemplateVersionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTemplateVersionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTemplateVersionRequestMultiError) AllErrors() []error { return m }

// DeleteTemplateVersionRequestValidationError is the validation error returned
// by DeleteTemplateVersionRequest.Validate if the designated constraints
// aren't met.
type DeleteTemplateVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTemplateVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTemplateVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTemplateVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTemplateVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTemplateVersionRequestValidationError) ErrorName() string {
	return "DeleteTemplateVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTemplateVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTemplateVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTemplateVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTemplateVersionRequestValidationError{}

// Validate checks the field values on DeleteTemplateVersionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTemplateVersionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTemplateVersionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteTemplateVersionResponseMultiError, or nil if none found.
func (m *DeleteTemplateVersionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTemplateVersionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTemplateVersionResponseMultiError(errors)
	}

	return nil
}

// DeleteTemplateVersionResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteTemplateVersionResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteTemplateVersionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTemplateVersionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTemplateVersionResponseMultiError) AllErrors() []error { return m }

// DeleteTemplateVersionResponseValidationError is the validation error
// returned by DeleteTemplateVersionResponse.Validate if the designated
// constraints aren't met.
type DeleteTemplateVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTemplateVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTemplateVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTemplateVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTemplateVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTemplateVersionResponseValidationError) ErrorName() string {
	return "DeleteTemplateVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTemplateVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTemplateVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTemplateVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTemplateVersionResponseValidationError{}

// Validate checks the field values on ListTemplateVersionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTemplateVersionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTemplateVersionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTemplateVersionRequestMultiError, or nil if none found.
func (m *ListTemplateVersionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTemplateVersionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListTemplateVersionRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListTemplateVersionRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTemplateVersionRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TplId

	if len(errors) > 0 {
		return ListTemplateVersionRequestMultiError(errors)
	}

	return nil
}

// ListTemplateVersionRequestMultiError is an error wrapping multiple
// validation errors returned by ListTemplateVersionRequest.ValidateAll() if
// the designated constraints aren't met.
type ListTemplateVersionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTemplateVersionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTemplateVersionRequestMultiError) AllErrors() []error { return m }

// ListTemplateVersionRequestValidationError is the validation error returned
// by ListTemplateVersionRequest.Validate if the designated constraints aren't met.
type ListTemplateVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplateVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplateVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplateVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplateVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplateVersionRequestValidationError) ErrorName() string {
	return "ListTemplateVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplateVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplateVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplateVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplateVersionRequestValidationError{}

// Validate checks the field values on ListTemplateVersionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTemplateVersionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTemplateVersionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTemplateVersionResponseMultiError, or nil if none found.
func (m *ListTemplateVersionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTemplateVersionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVersions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTemplateVersionResponseValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTemplateVersionResponseValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTemplateVersionResponseValidationError{
					field:  fmt.Sprintf("Versions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTemplateVersionResponseMultiError(errors)
	}

	return nil
}

// ListTemplateVersionResponseMultiError is an error wrapping multiple
// validation errors returned by ListTemplateVersionResponse.ValidateAll() if
// the designated constraints aren't met.
type ListTemplateVersionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTemplateVersionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTemplateVersionResponseMultiError) AllErrors() []error { return m }

// ListTemplateVersionResponseValidationError is the validation error returned
// by ListTemplateVersionResponse.Validate if the designated constraints
// aren't met.
type ListTemplateVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplateVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplateVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplateVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplateVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplateVersionResponseValidationError) ErrorName() string {
	return "ListTemplateVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplateVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplateVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplateVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplateVersionResponseValidationError{}

// Validate checks the field values on RelatedProvider with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RelatedProvider) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelatedProvider with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelatedProviderMultiError, or nil if none found.
func (m *RelatedProvider) ValidateAll() error {
	return m.validate(true)
}

func (m *RelatedProvider) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProviderId

	// no validation rules for ProviderName

	if len(errors) > 0 {
		return RelatedProviderMultiError(errors)
	}

	return nil
}

// RelatedProviderMultiError is an error wrapping multiple validation errors
// returned by RelatedProvider.ValidateAll() if the designated constraints
// aren't met.
type RelatedProviderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelatedProviderMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelatedProviderMultiError) AllErrors() []error { return m }

// RelatedProviderValidationError is the validation error returned by
// RelatedProvider.Validate if the designated constraints aren't met.
type RelatedProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelatedProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelatedProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelatedProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelatedProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelatedProviderValidationError) ErrorName() string { return "RelatedProviderValidationError" }

// Error satisfies the builtin error interface
func (e RelatedProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelatedProvider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelatedProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelatedProviderValidationError{}

// Validate checks the field values on SaveTemplateProvidersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveTemplateProvidersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveTemplateProvidersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveTemplateProvidersRequestMultiError, or nil if none found.
func (m *SaveTemplateProvidersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveTemplateProvidersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TplId

	// no validation rules for TplVersionId

	for idx, item := range m.GetRelatedProviders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SaveTemplateProvidersRequestValidationError{
						field:  fmt.Sprintf("RelatedProviders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SaveTemplateProvidersRequestValidationError{
						field:  fmt.Sprintf("RelatedProviders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SaveTemplateProvidersRequestValidationError{
					field:  fmt.Sprintf("RelatedProviders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SaveTemplateProvidersRequestMultiError(errors)
	}

	return nil
}

// SaveTemplateProvidersRequestMultiError is an error wrapping multiple
// validation errors returned by SaveTemplateProvidersRequest.ValidateAll() if
// the designated constraints aren't met.
type SaveTemplateProvidersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveTemplateProvidersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveTemplateProvidersRequestMultiError) AllErrors() []error { return m }

// SaveTemplateProvidersRequestValidationError is the validation error returned
// by SaveTemplateProvidersRequest.Validate if the designated constraints
// aren't met.
type SaveTemplateProvidersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveTemplateProvidersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveTemplateProvidersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveTemplateProvidersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveTemplateProvidersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveTemplateProvidersRequestValidationError) ErrorName() string {
	return "SaveTemplateProvidersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SaveTemplateProvidersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveTemplateProvidersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveTemplateProvidersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveTemplateProvidersRequestValidationError{}

// Validate checks the field values on SaveTemplateProvidersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveTemplateProvidersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveTemplateProvidersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SaveTemplateProvidersResponseMultiError, or nil if none found.
func (m *SaveTemplateProvidersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveTemplateProvidersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProviders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SaveTemplateProvidersResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SaveTemplateProvidersResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SaveTemplateProvidersResponseValidationError{
					field:  fmt.Sprintf("Providers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SaveTemplateProvidersResponseMultiError(errors)
	}

	return nil
}

// SaveTemplateProvidersResponseMultiError is an error wrapping multiple
// validation errors returned by SaveTemplateProvidersResponse.ValidateAll()
// if the designated constraints aren't met.
type SaveTemplateProvidersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveTemplateProvidersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveTemplateProvidersResponseMultiError) AllErrors() []error { return m }

// SaveTemplateProvidersResponseValidationError is the validation error
// returned by SaveTemplateProvidersResponse.Validate if the designated
// constraints aren't met.
type SaveTemplateProvidersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveTemplateProvidersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveTemplateProvidersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveTemplateProvidersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveTemplateProvidersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveTemplateProvidersResponseValidationError) ErrorName() string {
	return "SaveTemplateProvidersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SaveTemplateProvidersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveTemplateProvidersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveTemplateProvidersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveTemplateProvidersResponseValidationError{}

// Validate checks the field values on DeleteTemplateProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTemplateProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTemplateProviderRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteTemplateProviderRequestMultiError, or nil if none found.
func (m *DeleteTemplateProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTemplateProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteTemplateProviderRequestMultiError(errors)
	}

	return nil
}

// DeleteTemplateProviderRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteTemplateProviderRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteTemplateProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTemplateProviderRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTemplateProviderRequestMultiError) AllErrors() []error { return m }

// DeleteTemplateProviderRequestValidationError is the validation error
// returned by DeleteTemplateProviderRequest.Validate if the designated
// constraints aren't met.
type DeleteTemplateProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTemplateProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTemplateProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTemplateProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTemplateProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTemplateProviderRequestValidationError) ErrorName() string {
	return "DeleteTemplateProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTemplateProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTemplateProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTemplateProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTemplateProviderRequestValidationError{}

// Validate checks the field values on DeleteTemplateProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTemplateProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTemplateProviderResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteTemplateProviderResponseMultiError, or nil if none found.
func (m *DeleteTemplateProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTemplateProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTemplateProviderResponseMultiError(errors)
	}

	return nil
}

// DeleteTemplateProviderResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteTemplateProviderResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteTemplateProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTemplateProviderResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTemplateProviderResponseMultiError) AllErrors() []error { return m }

// DeleteTemplateProviderResponseValidationError is the validation error
// returned by DeleteTemplateProviderResponse.Validate if the designated
// constraints aren't met.
type DeleteTemplateProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTemplateProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTemplateProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTemplateProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTemplateProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTemplateProviderResponseValidationError) ErrorName() string {
	return "DeleteTemplateProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTemplateProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTemplateProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTemplateProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTemplateProviderResponseValidationError{}

// Validate checks the field values on ListTemplateProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTemplateProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTemplateProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTemplateProviderRequestMultiError, or nil if none found.
func (m *ListTemplateProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTemplateProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListTemplateProviderRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListTemplateProviderRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTemplateProviderRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for VersionId

	if len(errors) > 0 {
		return ListTemplateProviderRequestMultiError(errors)
	}

	return nil
}

// ListTemplateProviderRequestMultiError is an error wrapping multiple
// validation errors returned by ListTemplateProviderRequest.ValidateAll() if
// the designated constraints aren't met.
type ListTemplateProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTemplateProviderRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTemplateProviderRequestMultiError) AllErrors() []error { return m }

// ListTemplateProviderRequestValidationError is the validation error returned
// by ListTemplateProviderRequest.Validate if the designated constraints
// aren't met.
type ListTemplateProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplateProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplateProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplateProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplateProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplateProviderRequestValidationError) ErrorName() string {
	return "ListTemplateProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplateProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplateProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplateProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplateProviderRequestValidationError{}

// Validate checks the field values on ListTemplateProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTemplateProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTemplateProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTemplateProviderResponseMultiError, or nil if none found.
func (m *ListTemplateProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTemplateProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProviders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTemplateProviderResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTemplateProviderResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTemplateProviderResponseValidationError{
					field:  fmt.Sprintf("Providers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTemplateProviderResponseMultiError(errors)
	}

	return nil
}

// ListTemplateProviderResponseMultiError is an error wrapping multiple
// validation errors returned by ListTemplateProviderResponse.ValidateAll() if
// the designated constraints aren't met.
type ListTemplateProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTemplateProviderResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTemplateProviderResponseMultiError) AllErrors() []error { return m }

// ListTemplateProviderResponseValidationError is the validation error returned
// by ListTemplateProviderResponse.Validate if the designated constraints
// aren't met.
type ListTemplateProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplateProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplateProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplateProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplateProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplateProviderResponseValidationError) ErrorName() string {
	return "ListTemplateProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplateProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplateProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplateProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplateProviderResponseValidationError{}
