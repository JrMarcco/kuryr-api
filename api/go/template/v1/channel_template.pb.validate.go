// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: template/v1/channel_template.proto

package templatev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	commonv1 "github.com/JrMarcco/kuryr-api/api/go/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = commonv1.Channel(0)
)

// Validate checks the field values on ChannelTemplate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChannelTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelTemplate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChannelTemplateMultiError, or nil if none found.
func (m *ChannelTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OwnerId

	// no validation rules for OwnerType

	// no validation rules for TplName

	// no validation rules for TplDesc

	// no validation rules for Channel

	// no validation rules for NotificationType

	// no validation rules for ActivatedVersionId

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ChannelTemplateMultiError(errors)
	}

	return nil
}

// ChannelTemplateMultiError is an error wrapping multiple validation errors
// returned by ChannelTemplate.ValidateAll() if the designated constraints
// aren't met.
type ChannelTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelTemplateMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelTemplateMultiError) AllErrors() []error { return m }

// ChannelTemplateValidationError is the validation error returned by
// ChannelTemplate.Validate if the designated constraints aren't met.
type ChannelTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelTemplateValidationError) ErrorName() string { return "ChannelTemplateValidationError" }

// Error satisfies the builtin error interface
func (e ChannelTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelTemplateValidationError{}

// Validate checks the field values on TemplateVersion with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TemplateVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TemplateVersion with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TemplateVersionMultiError, or nil if none found.
func (m *TemplateVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *TemplateVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TplId

	// no validation rules for VersionName

	// no validation rules for Signature

	// no validation rules for Content

	// no validation rules for ApplyRemark

	// no validation rules for AuditId

	// no validation rules for AuditorId

	// no validation rules for AuditTime

	// no validation rules for AuditStatus

	// no validation rules for RejectionReason

	// no validation rules for LastReviewAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return TemplateVersionMultiError(errors)
	}

	return nil
}

// TemplateVersionMultiError is an error wrapping multiple validation errors
// returned by TemplateVersion.ValidateAll() if the designated constraints
// aren't met.
type TemplateVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TemplateVersionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TemplateVersionMultiError) AllErrors() []error { return m }

// TemplateVersionValidationError is the validation error returned by
// TemplateVersion.Validate if the designated constraints aren't met.
type TemplateVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateVersionValidationError) ErrorName() string { return "TemplateVersionValidationError" }

// Error satisfies the builtin error interface
func (e TemplateVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateVersionValidationError{}

// Validate checks the field values on TemplateProvider with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TemplateProvider) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TemplateProvider with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TemplateProviderMultiError, or nil if none found.
func (m *TemplateProvider) ValidateAll() error {
	return m.validate(true)
}

func (m *TemplateProvider) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TplId

	// no validation rules for TplVersionId

	// no validation rules for ProviderId

	// no validation rules for ProviderName

	// no validation rules for ProviderTplId

	// no validation rules for ProviderChannel

	// no validation rules for AuditRequestId

	// no validation rules for AuditStatus

	// no validation rules for RejectionReason

	// no validation rules for LastReviewAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return TemplateProviderMultiError(errors)
	}

	return nil
}

// TemplateProviderMultiError is an error wrapping multiple validation errors
// returned by TemplateProvider.ValidateAll() if the designated constraints
// aren't met.
type TemplateProviderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TemplateProviderMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TemplateProviderMultiError) AllErrors() []error { return m }

// TemplateProviderValidationError is the validation error returned by
// TemplateProvider.Validate if the designated constraints aren't met.
type TemplateProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateProviderValidationError) ErrorName() string { return "TemplateProviderValidationError" }

// Error satisfies the builtin error interface
func (e TemplateProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateProvider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateProviderValidationError{}

// Validate checks the field values on SaveRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SaveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SaveRequestMultiError, or
// nil if none found.
func (m *SaveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizId

	// no validation rules for TplName

	// no validation rules for TplDesc

	// no validation rules for Channel

	// no validation rules for NotificationType

	if len(errors) > 0 {
		return SaveRequestMultiError(errors)
	}

	return nil
}

// SaveRequestMultiError is an error wrapping multiple validation errors
// returned by SaveRequest.ValidateAll() if the designated constraints aren't met.
type SaveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveRequestMultiError) AllErrors() []error { return m }

// SaveRequestValidationError is the validation error returned by
// SaveRequest.Validate if the designated constraints aren't met.
type SaveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveRequestValidationError) ErrorName() string { return "SaveRequestValidationError" }

// Error satisfies the builtin error interface
func (e SaveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveRequestValidationError{}

// Validate checks the field values on SaveResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SaveResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SaveResponseMultiError, or
// nil if none found.
func (m *SaveResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SaveResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SaveResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SaveResponseValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SaveResponseMultiError(errors)
	}

	return nil
}

// SaveResponseMultiError is an error wrapping multiple validation errors
// returned by SaveResponse.ValidateAll() if the designated constraints aren't met.
type SaveResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveResponseMultiError) AllErrors() []error { return m }

// SaveResponseValidationError is the validation error returned by
// SaveResponse.Validate if the designated constraints aren't met.
type SaveResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveResponseValidationError) ErrorName() string { return "SaveResponseValidationError" }

// Error satisfies the builtin error interface
func (e SaveResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveResponseValidationError{}

// Validate checks the field values on SaveVersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveVersionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveVersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveVersionRequestMultiError, or nil if none found.
func (m *SaveVersionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveVersionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TplId

	// no validation rules for VersionName

	// no validation rules for Signature

	// no validation rules for Content

	// no validation rules for ApplyRemark

	if len(errors) > 0 {
		return SaveVersionRequestMultiError(errors)
	}

	return nil
}

// SaveVersionRequestMultiError is an error wrapping multiple validation errors
// returned by SaveVersionRequest.ValidateAll() if the designated constraints
// aren't met.
type SaveVersionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveVersionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveVersionRequestMultiError) AllErrors() []error { return m }

// SaveVersionRequestValidationError is the validation error returned by
// SaveVersionRequest.Validate if the designated constraints aren't met.
type SaveVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveVersionRequestValidationError) ErrorName() string {
	return "SaveVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SaveVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveVersionRequestValidationError{}

// Validate checks the field values on SaveVersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveVersionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveVersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveVersionResponseMultiError, or nil if none found.
func (m *SaveVersionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveVersionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SaveVersionResponseValidationError{
					field:  "Version",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SaveVersionResponseValidationError{
					field:  "Version",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SaveVersionResponseValidationError{
				field:  "Version",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SaveVersionResponseMultiError(errors)
	}

	return nil
}

// SaveVersionResponseMultiError is an error wrapping multiple validation
// errors returned by SaveVersionResponse.ValidateAll() if the designated
// constraints aren't met.
type SaveVersionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveVersionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveVersionResponseMultiError) AllErrors() []error { return m }

// SaveVersionResponseValidationError is the validation error returned by
// SaveVersionResponse.Validate if the designated constraints aren't met.
type SaveVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveVersionResponseValidationError) ErrorName() string {
	return "SaveVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SaveVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveVersionResponseValidationError{}

// Validate checks the field values on RelatedProvider with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RelatedProvider) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelatedProvider with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelatedProviderMultiError, or nil if none found.
func (m *RelatedProvider) ValidateAll() error {
	return m.validate(true)
}

func (m *RelatedProvider) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProviderId

	// no validation rules for ProviderName

	if len(errors) > 0 {
		return RelatedProviderMultiError(errors)
	}

	return nil
}

// RelatedProviderMultiError is an error wrapping multiple validation errors
// returned by RelatedProvider.ValidateAll() if the designated constraints
// aren't met.
type RelatedProviderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelatedProviderMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelatedProviderMultiError) AllErrors() []error { return m }

// RelatedProviderValidationError is the validation error returned by
// RelatedProvider.Validate if the designated constraints aren't met.
type RelatedProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelatedProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelatedProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelatedProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelatedProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelatedProviderValidationError) ErrorName() string { return "RelatedProviderValidationError" }

// Error satisfies the builtin error interface
func (e RelatedProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelatedProvider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelatedProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelatedProviderValidationError{}

// Validate checks the field values on SaveProvidersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveProvidersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveProvidersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveProvidersRequestMultiError, or nil if none found.
func (m *SaveProvidersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveProvidersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TplId

	// no validation rules for TplVersionId

	for idx, item := range m.GetRelatedProviders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SaveProvidersRequestValidationError{
						field:  fmt.Sprintf("RelatedProviders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SaveProvidersRequestValidationError{
						field:  fmt.Sprintf("RelatedProviders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SaveProvidersRequestValidationError{
					field:  fmt.Sprintf("RelatedProviders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SaveProvidersRequestMultiError(errors)
	}

	return nil
}

// SaveProvidersRequestMultiError is an error wrapping multiple validation
// errors returned by SaveProvidersRequest.ValidateAll() if the designated
// constraints aren't met.
type SaveProvidersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveProvidersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveProvidersRequestMultiError) AllErrors() []error { return m }

// SaveProvidersRequestValidationError is the validation error returned by
// SaveProvidersRequest.Validate if the designated constraints aren't met.
type SaveProvidersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveProvidersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveProvidersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveProvidersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveProvidersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveProvidersRequestValidationError) ErrorName() string {
	return "SaveProvidersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SaveProvidersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveProvidersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveProvidersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveProvidersRequestValidationError{}

// Validate checks the field values on SaveProvidersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveProvidersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveProvidersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveProvidersResponseMultiError, or nil if none found.
func (m *SaveProvidersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveProvidersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProviders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SaveProvidersResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SaveProvidersResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SaveProvidersResponseValidationError{
					field:  fmt.Sprintf("Providers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SaveProvidersResponseMultiError(errors)
	}

	return nil
}

// SaveProvidersResponseMultiError is an error wrapping multiple validation
// errors returned by SaveProvidersResponse.ValidateAll() if the designated
// constraints aren't met.
type SaveProvidersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveProvidersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveProvidersResponseMultiError) AllErrors() []error { return m }

// SaveProvidersResponseValidationError is the validation error returned by
// SaveProvidersResponse.Validate if the designated constraints aren't met.
type SaveProvidersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveProvidersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveProvidersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveProvidersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveProvidersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveProvidersResponseValidationError) ErrorName() string {
	return "SaveProvidersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SaveProvidersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveProvidersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveProvidersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveProvidersResponseValidationError{}
