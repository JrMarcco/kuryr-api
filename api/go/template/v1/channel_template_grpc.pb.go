// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: template/v1/channel_template.proto

package templatev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TemplateService_SaveTemplate_FullMethodName           = "/template.v1.TemplateService/SaveTemplate"
	TemplateService_SaveTemplateVersion_FullMethodName    = "/template.v1.TemplateService/SaveTemplateVersion"
	TemplateService_SaveTemplateProviders_FullMethodName  = "/template.v1.TemplateService/SaveTemplateProviders"
	TemplateService_DeleteTemplate_FullMethodName         = "/template.v1.TemplateService/DeleteTemplate"
	TemplateService_DeleteTemplateVersion_FullMethodName  = "/template.v1.TemplateService/DeleteTemplateVersion"
	TemplateService_DeleteTemplateProvider_FullMethodName = "/template.v1.TemplateService/DeleteTemplateProvider"
	TemplateService_ListTemplateByBizId_FullMethodName    = "/template.v1.TemplateService/ListTemplateByBizId"
	TemplateService_ListTemplateVersion_FullMethodName    = "/template.v1.TemplateService/ListTemplateVersion"
	TemplateService_ListTemplateProvider_FullMethodName   = "/template.v1.TemplateService/ListTemplateProvider"
)

// TemplateServiceClient is the client API for TemplateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TemplateServiceClient interface {
	SaveTemplate(ctx context.Context, in *SaveTemplateRequest, opts ...grpc.CallOption) (*SaveTemplateResponse, error)
	SaveTemplateVersion(ctx context.Context, in *SaveTemplateVersionRequest, opts ...grpc.CallOption) (*SaveTemplateVersionResponse, error)
	SaveTemplateProviders(ctx context.Context, in *SaveTemplateProvidersRequest, opts ...grpc.CallOption) (*SaveTemplateProvidersResponse, error)
	DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, opts ...grpc.CallOption) (*DeleteTemplateResponse, error)
	DeleteTemplateVersion(ctx context.Context, in *DeleteTemplateVersionRequest, opts ...grpc.CallOption) (*DeleteTemplateVersionResponse, error)
	DeleteTemplateProvider(ctx context.Context, in *DeleteTemplateProviderRequest, opts ...grpc.CallOption) (*DeleteTemplateProviderResponse, error)
	ListTemplateByBizId(ctx context.Context, in *ListTemplateByBizIdRequest, opts ...grpc.CallOption) (*ListTemplateByBizIdResponse, error)
	ListTemplateVersion(ctx context.Context, in *ListTemplateVersionRequest, opts ...grpc.CallOption) (*ListTemplateVersionResponse, error)
	ListTemplateProvider(ctx context.Context, in *ListTemplateProviderRequest, opts ...grpc.CallOption) (*ListTemplateProviderResponse, error)
}

type templateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTemplateServiceClient(cc grpc.ClientConnInterface) TemplateServiceClient {
	return &templateServiceClient{cc}
}

func (c *templateServiceClient) SaveTemplate(ctx context.Context, in *SaveTemplateRequest, opts ...grpc.CallOption) (*SaveTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveTemplateResponse)
	err := c.cc.Invoke(ctx, TemplateService_SaveTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) SaveTemplateVersion(ctx context.Context, in *SaveTemplateVersionRequest, opts ...grpc.CallOption) (*SaveTemplateVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveTemplateVersionResponse)
	err := c.cc.Invoke(ctx, TemplateService_SaveTemplateVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) SaveTemplateProviders(ctx context.Context, in *SaveTemplateProvidersRequest, opts ...grpc.CallOption) (*SaveTemplateProvidersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveTemplateProvidersResponse)
	err := c.cc.Invoke(ctx, TemplateService_SaveTemplateProviders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, opts ...grpc.CallOption) (*DeleteTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTemplateResponse)
	err := c.cc.Invoke(ctx, TemplateService_DeleteTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) DeleteTemplateVersion(ctx context.Context, in *DeleteTemplateVersionRequest, opts ...grpc.CallOption) (*DeleteTemplateVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTemplateVersionResponse)
	err := c.cc.Invoke(ctx, TemplateService_DeleteTemplateVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) DeleteTemplateProvider(ctx context.Context, in *DeleteTemplateProviderRequest, opts ...grpc.CallOption) (*DeleteTemplateProviderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTemplateProviderResponse)
	err := c.cc.Invoke(ctx, TemplateService_DeleteTemplateProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) ListTemplateByBizId(ctx context.Context, in *ListTemplateByBizIdRequest, opts ...grpc.CallOption) (*ListTemplateByBizIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTemplateByBizIdResponse)
	err := c.cc.Invoke(ctx, TemplateService_ListTemplateByBizId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) ListTemplateVersion(ctx context.Context, in *ListTemplateVersionRequest, opts ...grpc.CallOption) (*ListTemplateVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTemplateVersionResponse)
	err := c.cc.Invoke(ctx, TemplateService_ListTemplateVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) ListTemplateProvider(ctx context.Context, in *ListTemplateProviderRequest, opts ...grpc.CallOption) (*ListTemplateProviderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTemplateProviderResponse)
	err := c.cc.Invoke(ctx, TemplateService_ListTemplateProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemplateServiceServer is the server API for TemplateService service.
// All implementations should embed UnimplementedTemplateServiceServer
// for forward compatibility.
type TemplateServiceServer interface {
	SaveTemplate(context.Context, *SaveTemplateRequest) (*SaveTemplateResponse, error)
	SaveTemplateVersion(context.Context, *SaveTemplateVersionRequest) (*SaveTemplateVersionResponse, error)
	SaveTemplateProviders(context.Context, *SaveTemplateProvidersRequest) (*SaveTemplateProvidersResponse, error)
	DeleteTemplate(context.Context, *DeleteTemplateRequest) (*DeleteTemplateResponse, error)
	DeleteTemplateVersion(context.Context, *DeleteTemplateVersionRequest) (*DeleteTemplateVersionResponse, error)
	DeleteTemplateProvider(context.Context, *DeleteTemplateProviderRequest) (*DeleteTemplateProviderResponse, error)
	ListTemplateByBizId(context.Context, *ListTemplateByBizIdRequest) (*ListTemplateByBizIdResponse, error)
	ListTemplateVersion(context.Context, *ListTemplateVersionRequest) (*ListTemplateVersionResponse, error)
	ListTemplateProvider(context.Context, *ListTemplateProviderRequest) (*ListTemplateProviderResponse, error)
}

// UnimplementedTemplateServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTemplateServiceServer struct{}

func (UnimplementedTemplateServiceServer) SaveTemplate(context.Context, *SaveTemplateRequest) (*SaveTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTemplate not implemented")
}
func (UnimplementedTemplateServiceServer) SaveTemplateVersion(context.Context, *SaveTemplateVersionRequest) (*SaveTemplateVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTemplateVersion not implemented")
}
func (UnimplementedTemplateServiceServer) SaveTemplateProviders(context.Context, *SaveTemplateProvidersRequest) (*SaveTemplateProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTemplateProviders not implemented")
}
func (UnimplementedTemplateServiceServer) DeleteTemplate(context.Context, *DeleteTemplateRequest) (*DeleteTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplate not implemented")
}
func (UnimplementedTemplateServiceServer) DeleteTemplateVersion(context.Context, *DeleteTemplateVersionRequest) (*DeleteTemplateVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplateVersion not implemented")
}
func (UnimplementedTemplateServiceServer) DeleteTemplateProvider(context.Context, *DeleteTemplateProviderRequest) (*DeleteTemplateProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplateProvider not implemented")
}
func (UnimplementedTemplateServiceServer) ListTemplateByBizId(context.Context, *ListTemplateByBizIdRequest) (*ListTemplateByBizIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateByBizId not implemented")
}
func (UnimplementedTemplateServiceServer) ListTemplateVersion(context.Context, *ListTemplateVersionRequest) (*ListTemplateVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateVersion not implemented")
}
func (UnimplementedTemplateServiceServer) ListTemplateProvider(context.Context, *ListTemplateProviderRequest) (*ListTemplateProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateProvider not implemented")
}
func (UnimplementedTemplateServiceServer) testEmbeddedByValue() {}

// UnsafeTemplateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemplateServiceServer will
// result in compilation errors.
type UnsafeTemplateServiceServer interface {
	mustEmbedUnimplementedTemplateServiceServer()
}

func RegisterTemplateServiceServer(s grpc.ServiceRegistrar, srv TemplateServiceServer) {
	// If the following call pancis, it indicates UnimplementedTemplateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TemplateService_ServiceDesc, srv)
}

func _TemplateService_SaveTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).SaveTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateService_SaveTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).SaveTemplate(ctx, req.(*SaveTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_SaveTemplateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTemplateVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).SaveTemplateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateService_SaveTemplateVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).SaveTemplateVersion(ctx, req.(*SaveTemplateVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_SaveTemplateProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTemplateProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).SaveTemplateProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateService_SaveTemplateProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).SaveTemplateProviders(ctx, req.(*SaveTemplateProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_DeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).DeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateService_DeleteTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).DeleteTemplate(ctx, req.(*DeleteTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_DeleteTemplateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).DeleteTemplateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateService_DeleteTemplateVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).DeleteTemplateVersion(ctx, req.(*DeleteTemplateVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_DeleteTemplateProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).DeleteTemplateProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateService_DeleteTemplateProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).DeleteTemplateProvider(ctx, req.(*DeleteTemplateProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_ListTemplateByBizId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateByBizIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).ListTemplateByBizId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateService_ListTemplateByBizId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).ListTemplateByBizId(ctx, req.(*ListTemplateByBizIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_ListTemplateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).ListTemplateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateService_ListTemplateVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).ListTemplateVersion(ctx, req.(*ListTemplateVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_ListTemplateProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).ListTemplateProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateService_ListTemplateProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).ListTemplateProvider(ctx, req.(*ListTemplateProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TemplateService_ServiceDesc is the grpc.ServiceDesc for TemplateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TemplateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "template.v1.TemplateService",
	HandlerType: (*TemplateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveTemplate",
			Handler:    _TemplateService_SaveTemplate_Handler,
		},
		{
			MethodName: "SaveTemplateVersion",
			Handler:    _TemplateService_SaveTemplateVersion_Handler,
		},
		{
			MethodName: "SaveTemplateProviders",
			Handler:    _TemplateService_SaveTemplateProviders_Handler,
		},
		{
			MethodName: "DeleteTemplate",
			Handler:    _TemplateService_DeleteTemplate_Handler,
		},
		{
			MethodName: "DeleteTemplateVersion",
			Handler:    _TemplateService_DeleteTemplateVersion_Handler,
		},
		{
			MethodName: "DeleteTemplateProvider",
			Handler:    _TemplateService_DeleteTemplateProvider_Handler,
		},
		{
			MethodName: "ListTemplateByBizId",
			Handler:    _TemplateService_ListTemplateByBizId_Handler,
		},
		{
			MethodName: "ListTemplateVersion",
			Handler:    _TemplateService_ListTemplateVersion_Handler,
		},
		{
			MethodName: "ListTemplateProvider",
			Handler:    _TemplateService_ListTemplateProvider_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "template/v1/channel_template.proto",
}
