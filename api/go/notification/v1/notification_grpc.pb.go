// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: notification/v1/notification.proto

package notificationv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NotificationService_Send_FullMethodName           = "/notification.v1.NotificationService/Send"
	NotificationService_AsyncSend_FullMethodName      = "/notification.v1.NotificationService/AsyncSend"
	NotificationService_BatchSend_FullMethodName      = "/notification.v1.NotificationService/BatchSend"
	NotificationService_AsyncBatchSend_FullMethodName = "/notification.v1.NotificationService/AsyncBatchSend"
)

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 消息发送服务
type NotificationServiceClient interface {
	// 单条消息发送
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
	// 单条消息异步发送
	AsyncSend(ctx context.Context, in *AsyncSendRequest, opts ...grpc.CallOption) (*AsyncSendResponse, error)
	// 批量消息发送
	BatchSend(ctx context.Context, in *BatchSendRequest, opts ...grpc.CallOption) (*BatchSendResponse, error)
	// 批量消息异步发送
	AsyncBatchSend(ctx context.Context, in *AsyncBatchSendRequest, opts ...grpc.CallOption) (*AsyncBatchSendResponse, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, NotificationService_Send_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) AsyncSend(ctx context.Context, in *AsyncSendRequest, opts ...grpc.CallOption) (*AsyncSendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AsyncSendResponse)
	err := c.cc.Invoke(ctx, NotificationService_AsyncSend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) BatchSend(ctx context.Context, in *BatchSendRequest, opts ...grpc.CallOption) (*BatchSendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchSendResponse)
	err := c.cc.Invoke(ctx, NotificationService_BatchSend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) AsyncBatchSend(ctx context.Context, in *AsyncBatchSendRequest, opts ...grpc.CallOption) (*AsyncBatchSendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AsyncBatchSendResponse)
	err := c.cc.Invoke(ctx, NotificationService_AsyncBatchSend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations should embed UnimplementedNotificationServiceServer
// for forward compatibility.
//
// 消息发送服务
type NotificationServiceServer interface {
	// 单条消息发送
	Send(context.Context, *SendRequest) (*SendResponse, error)
	// 单条消息异步发送
	AsyncSend(context.Context, *AsyncSendRequest) (*AsyncSendResponse, error)
	// 批量消息发送
	BatchSend(context.Context, *BatchSendRequest) (*BatchSendResponse, error)
	// 批量消息异步发送
	AsyncBatchSend(context.Context, *AsyncBatchSendRequest) (*AsyncBatchSendResponse, error)
}

// UnimplementedNotificationServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotificationServiceServer struct{}

func (UnimplementedNotificationServiceServer) Send(context.Context, *SendRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedNotificationServiceServer) AsyncSend(context.Context, *AsyncSendRequest) (*AsyncSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AsyncSend not implemented")
}
func (UnimplementedNotificationServiceServer) BatchSend(context.Context, *BatchSendRequest) (*BatchSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSend not implemented")
}
func (UnimplementedNotificationServiceServer) AsyncBatchSend(context.Context, *AsyncBatchSendRequest) (*AsyncBatchSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AsyncBatchSend not implemented")
}
func (UnimplementedNotificationServiceServer) testEmbeddedByValue() {}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	// If the following call pancis, it indicates UnimplementedNotificationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_AsyncSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AsyncSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).AsyncSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_AsyncSend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).AsyncSend(ctx, req.(*AsyncSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_BatchSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).BatchSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_BatchSend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).BatchSend(ctx, req.(*BatchSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_AsyncBatchSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AsyncBatchSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).AsyncBatchSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_AsyncBatchSend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).AsyncBatchSend(ctx, req.(*AsyncBatchSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notification.v1.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _NotificationService_Send_Handler,
		},
		{
			MethodName: "AsyncSend",
			Handler:    _NotificationService_AsyncSend_Handler,
		},
		{
			MethodName: "BatchSend",
			Handler:    _NotificationService_BatchSend_Handler,
		},
		{
			MethodName: "AsyncBatchSend",
			Handler:    _NotificationService_AsyncBatchSend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification/v1/notification.proto",
}
