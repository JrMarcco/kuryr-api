// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: config/v1/config.proto

package configv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	commonv1 "github.com/JrMarcco/kuryr-api/api/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = commonv1.Channel(0)
)

// Validate checks the field values on RetryPolicyConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RetryPolicyConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetryPolicyConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RetryPolicyConfigMultiError, or nil if none found.
func (m *RetryPolicyConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *RetryPolicyConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MaxRetryTimes

	// no validation rules for InitIntervalMs

	// no validation rules for MaxIntervalMs

	if len(errors) > 0 {
		return RetryPolicyConfigMultiError(errors)
	}

	return nil
}

// RetryPolicyConfigMultiError is an error wrapping multiple validation errors
// returned by RetryPolicyConfig.ValidateAll() if the designated constraints
// aren't met.
type RetryPolicyConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetryPolicyConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetryPolicyConfigMultiError) AllErrors() []error { return m }

// RetryPolicyConfigValidationError is the validation error returned by
// RetryPolicyConfig.Validate if the designated constraints aren't met.
type RetryPolicyConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetryPolicyConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetryPolicyConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetryPolicyConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetryPolicyConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetryPolicyConfigValidationError) ErrorName() string {
	return "RetryPolicyConfigValidationError"
}

// Error satisfies the builtin error interface
func (e RetryPolicyConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetryPolicyConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetryPolicyConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetryPolicyConfigValidationError{}

// Validate checks the field values on CallbackConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CallbackConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallbackConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CallbackConfigMultiError,
// or nil if none found.
func (m *CallbackConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *CallbackConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	if all {
		switch v := interface{}(m.GetRetryPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallbackConfigValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallbackConfigValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRetryPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallbackConfigValidationError{
				field:  "RetryPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CallbackConfigMultiError(errors)
	}

	return nil
}

// CallbackConfigMultiError is an error wrapping multiple validation errors
// returned by CallbackConfig.ValidateAll() if the designated constraints
// aren't met.
type CallbackConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallbackConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallbackConfigMultiError) AllErrors() []error { return m }

// CallbackConfigValidationError is the validation error returned by
// CallbackConfig.Validate if the designated constraints aren't met.
type CallbackConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallbackConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallbackConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallbackConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallbackConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallbackConfigValidationError) ErrorName() string { return "CallbackConfigValidationError" }

// Error satisfies the builtin error interface
func (e CallbackConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallbackConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallbackConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallbackConfigValidationError{}

// Validate checks the field values on ChannelItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChannelItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChannelItemMultiError, or
// nil if none found.
func (m *ChannelItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Channel

	// no validation rules for Priority

	// no validation rules for Enabled

	if len(errors) > 0 {
		return ChannelItemMultiError(errors)
	}

	return nil
}

// ChannelItemMultiError is an error wrapping multiple validation errors
// returned by ChannelItem.ValidateAll() if the designated constraints aren't met.
type ChannelItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelItemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelItemMultiError) AllErrors() []error { return m }

// ChannelItemValidationError is the validation error returned by
// ChannelItem.Validate if the designated constraints aren't met.
type ChannelItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelItemValidationError) ErrorName() string { return "ChannelItemValidationError" }

// Error satisfies the builtin error interface
func (e ChannelItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelItemValidationError{}

// Validate checks the field values on ChannelConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChannelConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChannelConfigMultiError, or
// nil if none found.
func (m *ChannelConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChannelConfigValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChannelConfigValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChannelConfigValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetRetryPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChannelConfigValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChannelConfigValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRetryPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChannelConfigValidationError{
				field:  "RetryPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChannelConfigMultiError(errors)
	}

	return nil
}

// ChannelConfigMultiError is an error wrapping multiple validation errors
// returned by ChannelConfig.ValidateAll() if the designated constraints
// aren't met.
type ChannelConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelConfigMultiError) AllErrors() []error { return m }

// ChannelConfigValidationError is the validation error returned by
// ChannelConfig.Validate if the designated constraints aren't met.
type ChannelConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelConfigValidationError) ErrorName() string { return "ChannelConfigValidationError" }

// Error satisfies the builtin error interface
func (e ChannelConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelConfigValidationError{}

// Validate checks the field values on Quota with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Quota) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Quota with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in QuotaMultiError, or nil if none found.
func (m *Quota) ValidateAll() error {
	return m.validate(true)
}

func (m *Quota) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sms

	// no validation rules for Email

	if len(errors) > 0 {
		return QuotaMultiError(errors)
	}

	return nil
}

// QuotaMultiError is an error wrapping multiple validation errors returned by
// Quota.ValidateAll() if the designated constraints aren't met.
type QuotaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuotaMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuotaMultiError) AllErrors() []error { return m }

// QuotaValidationError is the validation error returned by Quota.Validate if
// the designated constraints aren't met.
type QuotaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaValidationError) ErrorName() string { return "QuotaValidationError" }

// Error satisfies the builtin error interface
func (e QuotaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuota.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaValidationError{}

// Validate checks the field values on QuotaConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QuotaConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuotaConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuotaConfigMultiError, or
// nil if none found.
func (m *QuotaConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *QuotaConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMonthly()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuotaConfigValidationError{
					field:  "Monthly",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuotaConfigValidationError{
					field:  "Monthly",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMonthly()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuotaConfigValidationError{
				field:  "Monthly",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDaily()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuotaConfigValidationError{
					field:  "Daily",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuotaConfigValidationError{
					field:  "Daily",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDaily()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuotaConfigValidationError{
				field:  "Daily",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QuotaConfigMultiError(errors)
	}

	return nil
}

// QuotaConfigMultiError is an error wrapping multiple validation errors
// returned by QuotaConfig.ValidateAll() if the designated constraints aren't met.
type QuotaConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuotaConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuotaConfigMultiError) AllErrors() []error { return m }

// QuotaConfigValidationError is the validation error returned by
// QuotaConfig.Validate if the designated constraints aren't met.
type QuotaConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaConfigValidationError) ErrorName() string { return "QuotaConfigValidationError" }

// Error satisfies the builtin error interface
func (e QuotaConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotaConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaConfigValidationError{}

// Validate checks the field values on BizConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BizConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BizConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BizConfigMultiError, or nil
// if none found.
func (m *BizConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *BizConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizId

	// no validation rules for OwnerType

	if all {
		switch v := interface{}(m.GetChannelConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BizConfigValidationError{
					field:  "ChannelConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BizConfigValidationError{
					field:  "ChannelConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChannelConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BizConfigValidationError{
				field:  "ChannelConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetQuotaConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BizConfigValidationError{
					field:  "QuotaConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BizConfigValidationError{
					field:  "QuotaConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuotaConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BizConfigValidationError{
				field:  "QuotaConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCallbackConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BizConfigValidationError{
					field:  "CallbackConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BizConfigValidationError{
					field:  "CallbackConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallbackConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BizConfigValidationError{
				field:  "CallbackConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RateLimit

	if len(errors) > 0 {
		return BizConfigMultiError(errors)
	}

	return nil
}

// BizConfigMultiError is an error wrapping multiple validation errors returned
// by BizConfig.ValidateAll() if the designated constraints aren't met.
type BizConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BizConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BizConfigMultiError) AllErrors() []error { return m }

// BizConfigValidationError is the validation error returned by
// BizConfig.Validate if the designated constraints aren't met.
type BizConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BizConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BizConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BizConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BizConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BizConfigValidationError) ErrorName() string { return "BizConfigValidationError" }

// Error satisfies the builtin error interface
func (e BizConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBizConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BizConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BizConfigValidationError{}

// Validate checks the field values on SaveRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SaveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SaveRequestMultiError, or
// nil if none found.
func (m *SaveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizId

	if all {
		switch v := interface{}(m.GetChannelConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SaveRequestValidationError{
					field:  "ChannelConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SaveRequestValidationError{
					field:  "ChannelConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChannelConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SaveRequestValidationError{
				field:  "ChannelConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetQuotaConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SaveRequestValidationError{
					field:  "QuotaConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SaveRequestValidationError{
					field:  "QuotaConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuotaConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SaveRequestValidationError{
				field:  "QuotaConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCallbackConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SaveRequestValidationError{
					field:  "CallbackConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SaveRequestValidationError{
					field:  "CallbackConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallbackConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SaveRequestValidationError{
				field:  "CallbackConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RateLimit

	if len(errors) > 0 {
		return SaveRequestMultiError(errors)
	}

	return nil
}

// SaveRequestMultiError is an error wrapping multiple validation errors
// returned by SaveRequest.ValidateAll() if the designated constraints aren't met.
type SaveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveRequestMultiError) AllErrors() []error { return m }

// SaveRequestValidationError is the validation error returned by
// SaveRequest.Validate if the designated constraints aren't met.
type SaveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveRequestValidationError) ErrorName() string { return "SaveRequestValidationError" }

// Error satisfies the builtin error interface
func (e SaveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveRequestValidationError{}

// Validate checks the field values on SaveResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SaveResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SaveResponseMultiError, or
// nil if none found.
func (m *SaveResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBizConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SaveResponseValidationError{
					field:  "BizConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SaveResponseValidationError{
					field:  "BizConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBizConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SaveResponseValidationError{
				field:  "BizConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SaveResponseMultiError(errors)
	}

	return nil
}

// SaveResponseMultiError is an error wrapping multiple validation errors
// returned by SaveResponse.ValidateAll() if the designated constraints aren't met.
type SaveResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveResponseMultiError) AllErrors() []error { return m }

// SaveResponseValidationError is the validation error returned by
// SaveResponse.Validate if the designated constraints aren't met.
type SaveResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveResponseValidationError) ErrorName() string { return "SaveResponseValidationError" }

// Error satisfies the builtin error interface
func (e SaveResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveResponseValidationError{}

// Validate checks the field values on DeleteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRequestMultiError, or
// nil if none found.
func (m *DeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteRequestMultiError(errors)
	}

	return nil
}

// DeleteRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRequestMultiError) AllErrors() []error { return m }

// DeleteRequestValidationError is the validation error returned by
// DeleteRequest.Validate if the designated constraints aren't met.
type DeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRequestValidationError) ErrorName() string { return "DeleteRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRequestValidationError{}

// Validate checks the field values on DeleteResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteResponseMultiError,
// or nil if none found.
func (m *DeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteResponseMultiError(errors)
	}

	return nil
}

// DeleteResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResponseMultiError) AllErrors() []error { return m }

// DeleteResponseValidationError is the validation error returned by
// DeleteResponse.Validate if the designated constraints aren't met.
type DeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResponseValidationError) ErrorName() string { return "DeleteResponseValidationError" }

// Error satisfies the builtin error interface
func (e DeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResponseValidationError{}

// Validate checks the field values on FindByIdRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FindByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindByIdRequestMultiError, or nil if none found.
func (m *FindByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return FindByIdRequestMultiError(errors)
	}

	return nil
}

// FindByIdRequestMultiError is an error wrapping multiple validation errors
// returned by FindByIdRequest.ValidateAll() if the designated constraints
// aren't met.
type FindByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByIdRequestMultiError) AllErrors() []error { return m }

// FindByIdRequestValidationError is the validation error returned by
// FindByIdRequest.Validate if the designated constraints aren't met.
type FindByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByIdRequestValidationError) ErrorName() string { return "FindByIdRequestValidationError" }

// Error satisfies the builtin error interface
func (e FindByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByIdRequestValidationError{}

// Validate checks the field values on FindByIdResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FindByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindByIdResponseMultiError, or nil if none found.
func (m *FindByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindByIdResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindByIdResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindByIdResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindByIdResponseMultiError(errors)
	}

	return nil
}

// FindByIdResponseMultiError is an error wrapping multiple validation errors
// returned by FindByIdResponse.ValidateAll() if the designated constraints
// aren't met.
type FindByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByIdResponseMultiError) AllErrors() []error { return m }

// FindByIdResponseValidationError is the validation error returned by
// FindByIdResponse.Validate if the designated constraints aren't met.
type FindByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByIdResponseValidationError) ErrorName() string { return "FindByIdResponseValidationError" }

// Error satisfies the builtin error interface
func (e FindByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByIdResponseValidationError{}
